pub use pallet::*;

#[frame_support::pallet]
pub mod pallet {
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	use frame_support::{transactional, PalletId};
	use frame_system::ensure_signed;

	use composable_traits::vault::{Deposit as Duration, Vault, VaultConfig};

	// ----------------------------------------------------------------------------------------------------
	//                                    Declaration Of The Pallet Type
	// ----------------------------------------------------------------------------------------------------
	#[pallet::pallet]
	#[pallet::generate_store(pub(super) trait Store)]
	pub struct Pallet<T>(_);

	// ----------------------------------------------------------------------------------------------------
	//                                      Config Trait
	// ----------------------------------------------------------------------------------------------------
	#[pallet::config]
	pub trait Config: frame_system::Config {
		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
	}

	// ----------------------------------------------------------------------------------------------------
	//                                      Runtime Storage
	// ----------------------------------------------------------------------------------------------------
	#[pallet::storage]
	#[pallet::getter(fn something)]
	pub type Something<T> = StorageValue<_, u32>;

	// ----------------------------------------------------------------------------------------------------
	//                                      Runtime Events
	// ----------------------------------------------------------------------------------------------------
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {}

	// ----------------------------------------------------------------------------------------------------
	//                                      Runtime  Errors
	// ----------------------------------------------------------------------------------------------------
	#[pallet::error]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Error<T> {}

	// ----------------------------------------------------------------------------------------------------
	//                                         Hooks
	// ----------------------------------------------------------------------------------------------------

	#[pallet::hooks]
	impl<T: Config> Hooks<T::BlockNumber> for Pallet<T> {}

	// ----------------------------------------------------------------------------------------------------
	//                                        Extrinsics
	// ----------------------------------------------------------------------------------------------------
	#[pallet::call]
	impl<T: Config> Pallet<T> {}
}

// ----------------------------------------------------------------------------------------------------
//                                             Options Trait
// ----------------------------------------------------------------------------------------------------
// impl<T: Config> Options for Pallet<T> {}

// ----------------------------------------------------------------------------------------------------
//                                        Low Level Functionality
// ----------------------------------------------------------------------------------------------------
impl<T: Config> Pallet<T> {}

// ----------------------------------------------------------------------------------------------------
//                                              Unit Tests
// ----------------------------------------------------------------------------------------------------
#[cfg(test)]
mod unit_tests {}
