@startuml
actor Buyer #blue
actor Seller #red
participant "Option Pallet" as Protocol #green
database Options
database Vaults
database Sellers
database Buyers
database Scheduler
entity ProtocolAccount #yellow
participant "Vault Pallet" as Vault #green
participant Oracle #green
participant "Pricing Pallet" as Pricing #green






group Epoch

group #00000022 Create Vault
ProtocolAccount -> Protocol: Create Vault (passing vault config)
activate Protocol
Protocol --> Protocol: check if vault does not already exist
Protocol --> Oracle: check if asset is supported
Protocol -> Vaults: save new vault
ProtocolAccount o<- Protocol: emit event
deactivate Protocol
end

group #00000022 Create Option
ProtocolAccount -> Protocol: Create Option (passing option config)
activate Protocol
Protocol --> Protocol: check if option does not already exist
Protocol --> Protocol: check if option asset_vaults exist
Protocol --> Protocol: check if option attributes are valid
Protocol -> Protocol: generate new option id
Protocol -> Options: save new option
Protocol -> Scheduler: save epoch for new option
ProtocolAccount o<- Protocol: emit event
deactivate Protocol
end
==  ==


group #FF000033 Deposit Window [From Monday 8AM UTC to Thursday 8AM UTC]
group #FF000055 Sell Option
Seller -> Protocol: Sell option (passing option_id)
activate Protocol
Protocol -> Options: get option
Protocol --> Protocol: check if deposit window
Protocol --> Protocol: check if Seller owns collateral
Protocol -> Vaults: get vault
Protocol -> Vault: calculate amount of shares to mint
Protocol -> ProtocolAccount: transfer Seller funds 
ProtocolAccount -> Vault: deposit funds
activate Vault
ProtocolAccount <-- Vault: receive shares
deactivate Vault
Protocol -> Sellers: create or update position
Protocol -> Options: increase total option amount for sale
Seller o<- Protocol: emit event
deactivate Protocol
end

group #FF000055 Delete Sell Option
Seller -> Protocol: Delete sell option (passing option_id)
activate Protocol
Protocol -> Options: get option
Protocol --> Protocol: check if deposit window
Protocol --> Protocol: check if Seller has position
Protocol -> Sellers: get position
Protocol -> Vaults: get vault
Protocol -> Vault: calculate amount of shares to burn
Protocol -> Vault: withdraw funds
activate Vault
ProtocolAccount <-- Vault: receive funds
deactivate Vault
Seller <- ProtocolAccount: transfer funds
Protocol -> Sellers: delete or update position
Protocol -> Options: decrease total option amount for sale
Seller o<- Protocol: emit event
deactivate Protocol
end
end

==  ==


group #0000FF33 Purchase Window [From Thursday 8AM UTC to Friday 8AM UTC]
Buyer -> Protocol: Buy option (passing option_id)
activate Protocol
Protocol -> Options: get option
Protocol -> Sellers: check option available for sale
note left
Better to have a storage 
just to list options 
that are still for sale?
end note
Protocol -> Pricing: get premium price for option
activate Pricing
Protocol <-- Pricing: premium_price
deactivate Pricing
Protocol --> Protocol: check if Buyer has funds for paying premium
Protocol -> ProtocolAccount: transfer premium
note left
Not yet decided what to do with premium.
We can deposit it into vault or distribute
it to seller at the end of purchase window
end note
Buyer <- Protocol: mint option token
Protocol -> Buyers: save position
note left
Not needed right now but 
will be useful for sure in future
end note
Buyer o<- Protocol: emit event
deactivate Protocol
end

==  ==

group #00000022 Stand-by Window [From Friday 8AM UTC to exp. date 8AM UTC]
Protocol -> Protocol: block all actions until expiration date
Protocol --> Protocol: evaluate if RFQ is needed
note left
TBD how to do it
end note
Protocol --> Protocol: calculate premium for sellers based on shares
Protocol -> Seller: transfer premium
note right
Do we want to transfer premiums already? 
Liquidity providers are happy, but less TVL for the protocol
end note
end
==  ==

group #00FF0033 Exercise Window [From exp. date 8AM UTC to 1 day after 8AM UTC]
Buyer -> Protocol: Exercise option (passing option_id)
note right
Do we want a exercise_all_option() 
function to exercise all the 
tokens inside a user account?
end note
activate Protocol
Protocol -> Options: get option
Protocol -> Vaults: get vault
Protocol -> Oracle: get asset spot price to calculate if option is in-the-money
activate Oracle
Protocol <-- Oracle: asset_price
deactivate Oracle
Protocol --> Protocol: check if option is in-the-money
Protocol --> Protocol: calculate amount to pay to Buyer
Protocol -> Vault: withdraw funds
activate Vault
ProtocolAccount <-- Vault: receive funds
deactivate Vault
Buyer <- ProtocolAccount: transfer funds
Protocol -> Buyers: delete position
Protocol -> Buyer: burn option token from user's account
Buyer o<- Protocol: emit event
deactivate Protocol
end
==  ==




group #FFFF0044 Withdraw Window [From 1 day after exp.date 8AM UTC to ?]
Seller -> Protocol: Withdraw funds (passing option_id)
note right
Do we want a exercise_all_option() 
function to withdraw all the 
user's positions?
end note
activate Protocol
Protocol -> Options: get option
Protocol -> Vaults: get vault
Protocol --> Protocol: calculate share to give to Seller (include yield)
Protocol -> Vault: withdraw funds
activate Vault
ProtocolAccount <-- Vault: receive funds
deactivate Vault
Seller <- ProtocolAccount: transfer funds
Protocol -> Sellers: delete position
Seller o<- Protocol: emit event
deactivate Protocol
end
end
@enduml