
//! Autogenerated weights for `tokenized_options`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `codespaces-67cb07`, CPU: `Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=tokenized_options
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=runtime/dali/src/weights
// --log
// error

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `tokenized_options`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> tokenized_options::WeightInfo for WeightInfo<T> {
	// Storage: TokenizedOptions AssetToVault (r:1 w:1)
	// Storage: Oracle Prices (r:1 w:0)
	// Storage: Vault VaultCount (r:1 w:1)
	// Storage: CurrencyFactory AssetIdRanges (r:1 w:1)
	// Storage: CurrencyFactory AssetEd (r:0 w:1)
	// Storage: Vault LpTokensToVaults (r:0 w:1)
	// Storage: Vault Vaults (r:0 w:1)
	fn create_asset_vault() -> Weight {
		(54_901_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: TokenizedOptions OptionHashToOptionId (r:1 w:1)
	// Storage: TokenizedOptions AssetToVault (r:2 w:0)
	// Storage: CurrencyFactory AssetIdRanges (r:1 w:1)
	// Storage: CurrencyFactory AssetEd (r:0 w:1)
	// Storage: TokenizedOptions Scheduler (r:0 w:4)
	// Storage: TokenizedOptions OptionIdToOption (r:0 w:1)
	fn create_option() -> Weight {
		(67_101_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: TokenizedOptions OptionIdToOption (r:1 w:1)
	// Storage: TokenizedOptions AssetToVault (r:1 w:0)
	// Storage: Vault Vaults (r:1 w:0)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: Vault CapitalStructure (r:1 w:0)
	// Storage: TokenizedOptions Sellers (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens TotalIssuance (r:2 w:1)
	fn sell_option() -> Weight {
		(215_704_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: TokenizedOptions OptionIdToOption (r:1 w:1)
	// Storage: TokenizedOptions Sellers (r:1 w:1)
	// Storage: TokenizedOptions AssetToVault (r:1 w:0)
	// Storage: Vault Vaults (r:1 w:0)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: Vault CapitalStructure (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:2 w:1)
	fn delete_sell_option() -> Weight {
		(195_502_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: TokenizedOptions OptionIdToOption (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: System Account (r:2 w:2)
	fn buy_option() -> Weight {
		(128_302_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: TokenizedOptions OptionIdToOption (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	fn exercise_option() -> Weight {
		(71_701_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: TokenizedOptions OptionIdToOption (r:1 w:0)
	// Storage: TokenizedOptions Sellers (r:1 w:1)
	// Storage: TokenizedOptions AssetToVault (r:1 w:0)
	// Storage: Vault Vaults (r:1 w:0)
	// Storage: Tokens Accounts (r:6 w:6)
	// Storage: Vault CapitalStructure (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:2 w:1)
	fn withdraw_collateral() -> Weight {
		(216_604_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
}
